/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import {
  allOfficersOfficersAllGet,
  AllOfficersOfficersAllGet$Params
} from '../fn/officers/all-officers-officers-all-get';
import {
  currentOfficersOfficersCurrentGet,
  CurrentOfficersOfficersCurrentGet$Params
} from '../fn/officers/current-officers-officers-current-get';
import {
  getOfficerInfoOfficersInfoComputingIdGet,
  GetOfficerInfoOfficersInfoComputingIdGet$Params
} from '../fn/officers/get-officer-info-officers-info-computing-id-get';
import {
  getOfficerTermsOfficersTermsComputingIdGet,
  GetOfficerTermsOfficersTermsComputingIdGet$Params
} from '../fn/officers/get-officer-terms-officers-terms-computing-id-get';
import {
  newOfficerTermOfficersTermPost,
  NewOfficerTermOfficersTermPost$Params
} from '../fn/officers/new-officer-term-officers-term-post';
import {
  removeOfficerOfficersTermTermIdDelete,
  RemoveOfficerOfficersTermTermIdDelete$Params
} from '../fn/officers/remove-officer-officers-term-term-id-delete';
import {
  updateInfoOfficersInfoComputingIdPatch,
  UpdateInfoOfficersInfoComputingIdPatch$Params
} from '../fn/officers/update-info-officers-info-computing-id-patch';
import {
  updateTermOfficersTermTermIdPatch,
  UpdateTermOfficersTermTermIdPatch$Params
} from '../fn/officers/update-term-officers-term-term-id-patch';

@Injectable({ providedIn: 'root' })
export class OfficersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `currentOfficersOfficersCurrentGet()` */
  static readonly CurrentOfficersOfficersCurrentGetPath = '/officers/current';

  /**
   * Current Officers.
   *
   * Get information about all the officers. More information is given if you're authenticated & have access to private executive data.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `currentOfficersOfficersCurrentGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentOfficersOfficersCurrentGet$Response(
    params?: CurrentOfficersOfficersCurrentGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return currentOfficersOfficersCurrentGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Current Officers.
   *
   * Get information about all the officers. More information is given if you're authenticated & have access to private executive data.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `currentOfficersOfficersCurrentGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  currentOfficersOfficersCurrentGet(
    params?: CurrentOfficersOfficersCurrentGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.currentOfficersOfficersCurrentGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `allOfficersOfficersAllGet()` */
  static readonly AllOfficersOfficersAllGetPath = '/officers/all';

  /**
   * All Officers.
   *
   * Information for all execs from all exec terms
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `allOfficersOfficersAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  allOfficersOfficersAllGet$Response(
    params?: AllOfficersOfficersAllGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return allOfficersOfficersAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * All Officers.
   *
   * Information for all execs from all exec terms
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `allOfficersOfficersAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  allOfficersOfficersAllGet(
    params?: AllOfficersOfficersAllGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.allOfficersOfficersAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getOfficerTermsOfficersTermsComputingIdGet()` */
  static readonly GetOfficerTermsOfficersTermsComputingIdGetPath = '/officers/terms/{computing_id}';

  /**
   * Get Officer Terms.
   *
   * Get term info for an executive. All term info is public for all past or active terms.
   *         Future terms can only be accessed by website admins.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOfficerTermsOfficersTermsComputingIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficerTermsOfficersTermsComputingIdGet$Response(
    params: GetOfficerTermsOfficersTermsComputingIdGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return getOfficerTermsOfficersTermsComputingIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Officer Terms.
   *
   * Get term info for an executive. All term info is public for all past or active terms.
   *         Future terms can only be accessed by website admins.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOfficerTermsOfficersTermsComputingIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficerTermsOfficersTermsComputingIdGet(
    params: GetOfficerTermsOfficersTermsComputingIdGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.getOfficerTermsOfficersTermsComputingIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getOfficerInfoOfficersInfoComputingIdGet()` */
  static readonly GetOfficerInfoOfficersInfoComputingIdGetPath = '/officers/info/{computing_id}';

  /**
   * Get Officer Info.
   *
   * Get officer info for the current user, if they've ever been an exec. Only admins can get info about another user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOfficerInfoOfficersInfoComputingIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficerInfoOfficersInfoComputingIdGet$Response(
    params: GetOfficerInfoOfficersInfoComputingIdGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return getOfficerInfoOfficersInfoComputingIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Officer Info.
   *
   * Get officer info for the current user, if they've ever been an exec. Only admins can get info about another user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOfficerInfoOfficersInfoComputingIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOfficerInfoOfficersInfoComputingIdGet(
    params: GetOfficerInfoOfficersInfoComputingIdGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.getOfficerInfoOfficersInfoComputingIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateInfoOfficersInfoComputingIdPatch()` */
  static readonly UpdateInfoOfficersInfoComputingIdPatchPath = '/officers/info/{computing_id}';

  /**
   * Update Info.
   *
   * After elections, officer computing ids are input into our system.
   *         If you have been elected as a new officer, you may authenticate with SFU CAS,
   *         then input your information & the valid token for us. Admins may update this info.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateInfoOfficersInfoComputingIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateInfoOfficersInfoComputingIdPatch$Response(
    params: UpdateInfoOfficersInfoComputingIdPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return updateInfoOfficersInfoComputingIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Info.
   *
   * After elections, officer computing ids are input into our system.
   *         If you have been elected as a new officer, you may authenticate with SFU CAS,
   *         then input your information & the valid token for us. Admins may update this info.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateInfoOfficersInfoComputingIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateInfoOfficersInfoComputingIdPatch(
    params: UpdateInfoOfficersInfoComputingIdPatch$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.updateInfoOfficersInfoComputingIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `newOfficerTermOfficersTermPost()` */
  static readonly NewOfficerTermOfficersTermPostPath = '/officers/term';

  /**
   * New Officer Term.
   *
   * Only the sysadmin, president, or DoA can submit this request. It will usually be the DoA.
   *         Updates the system with a new officer, and enables the user to login to the system to input their information.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `newOfficerTermOfficersTermPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newOfficerTermOfficersTermPost$Response(
    params: NewOfficerTermOfficersTermPost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return newOfficerTermOfficersTermPost(this.http, this.rootUrl, params, context);
  }

  /**
   * New Officer Term.
   *
   * Only the sysadmin, president, or DoA can submit this request. It will usually be the DoA.
   *         Updates the system with a new officer, and enables the user to login to the system to input their information.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `newOfficerTermOfficersTermPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  newOfficerTermOfficersTermPost(
    params: NewOfficerTermOfficersTermPost$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.newOfficerTermOfficersTermPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `removeOfficerOfficersTermTermIdDelete()` */
  static readonly RemoveOfficerOfficersTermTermIdDeletePath = '/officers/term/{term_id}';

  /**
   * Remove Officer.
   *
   * Remove the specified officer term. Only website admins can run this endpoint. BE CAREFUL WITH THIS!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeOfficerOfficersTermTermIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeOfficerOfficersTermTermIdDelete$Response(
    params: RemoveOfficerOfficersTermTermIdDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return removeOfficerOfficersTermTermIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Remove Officer.
   *
   * Remove the specified officer term. Only website admins can run this endpoint. BE CAREFUL WITH THIS!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeOfficerOfficersTermTermIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeOfficerOfficersTermTermIdDelete(
    params: RemoveOfficerOfficersTermTermIdDelete$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.removeOfficerOfficersTermTermIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateTermOfficersTermTermIdPatch()` */
  static readonly UpdateTermOfficersTermTermIdPatchPath = '/officers/term/{term_id}';

  /**
   * Update Term.
   *
   * A website admin may change the position & term length however they wish.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTermOfficersTermTermIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTermOfficersTermTermIdPatch$Response(
    params: UpdateTermOfficersTermTermIdPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return updateTermOfficersTermTermIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Term.
   *
   * A website admin may change the position & term length however they wish.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTermOfficersTermTermIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTermOfficersTermTermIdPatch(
    params: UpdateTermOfficersTermTermIdPatch$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.updateTermOfficersTermTermIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }
}
