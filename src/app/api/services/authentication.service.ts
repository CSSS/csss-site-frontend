/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import {
  getUserAuthUserGet,
  GetUserAuthUserGet$Params
} from '../fn/authentication/get-user-auth-user-get';
import {
  loginUserAuthLoginGet,
  LoginUserAuthLoginGet$Params
} from '../fn/authentication/login-user-auth-login-get';
import {
  logoutUserAuthLogoutGet,
  LogoutUserAuthLogoutGet$Params
} from '../fn/authentication/logout-user-auth-logout-get';
import {
  updateUserAuthUserPatch,
  UpdateUserAuthUserPatch$Params
} from '../fn/authentication/update-user-auth-user-patch';

@Injectable({ providedIn: 'root' })
export class AuthenticationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `loginUserAuthLoginGet()` */
  static readonly LoginUserAuthLoginGetPath = '/auth/login';

  /**
   * Login User.
   *
   * Login to the sfucsss.org. Must redirect to this endpoint from SFU's cas authentication service for correct parameters
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginUserAuthLoginGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUserAuthLoginGet$Response(
    params: LoginUserAuthLoginGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return loginUserAuthLoginGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Login User.
   *
   * Login to the sfucsss.org. Must redirect to this endpoint from SFU's cas authentication service for correct parameters
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginUserAuthLoginGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginUserAuthLoginGet(
    params: LoginUserAuthLoginGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.loginUserAuthLoginGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `logoutUserAuthLogoutGet()` */
  static readonly LogoutUserAuthLogoutGetPath = '/auth/logout';

  /**
   * Logout User.
   *
   * Logs out the current user by invalidating the session_id cookie
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `logoutUserAuthLogoutGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutUserAuthLogoutGet$Response(
    params?: LogoutUserAuthLogoutGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return logoutUserAuthLogoutGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Logout User.
   *
   * Logs out the current user by invalidating the session_id cookie
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `logoutUserAuthLogoutGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  logoutUserAuthLogoutGet(
    params?: LogoutUserAuthLogoutGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.logoutUserAuthLogoutGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getUserAuthUserGet()` */
  static readonly GetUserAuthUserGetPath = '/auth/user';

  /**
   * Get User.
   *
   * Get info about the current user. Only accessible by that user
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserAuthUserGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAuthUserGet$Response(
    params?: GetUserAuthUserGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return getUserAuthUserGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get User.
   *
   * Get info about the current user. Only accessible by that user
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserAuthUserGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserAuthUserGet(params?: GetUserAuthUserGet$Params, context?: HttpContext): Observable<any> {
    return this.getUserAuthUserGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateUserAuthUserPatch()` */
  static readonly UpdateUserAuthUserPatchPath = '/auth/user';

  /**
   * Update User.
   *
   * Update information for the currently logged in user. Only accessible by that user
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserAuthUserPatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserAuthUserPatch$Response(
    params: UpdateUserAuthUserPatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return updateUserAuthUserPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update User.
   *
   * Update information for the currently logged in user. Only accessible by that user
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserAuthUserPatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserAuthUserPatch(
    params: UpdateUserAuthUserPatch$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.updateUserAuthUserPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }
}
