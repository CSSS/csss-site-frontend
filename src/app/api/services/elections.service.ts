/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import {
  createElectionElectionsByNameNamePost,
  CreateElectionElectionsByNameNamePost$Params
} from '../fn/elections/create-election-elections-by-name-name-post';
import {
  deleteElectionElectionsByNameNameDelete,
  DeleteElectionElectionsByNameNameDelete$Params
} from '../fn/elections/delete-election-elections-by-name-name-delete';
import {
  deleteRegistrationElectionsRegisterNameDelete,
  DeleteRegistrationElectionsRegisterNameDelete$Params
} from '../fn/elections/delete-registration-elections-register-name-delete';
import {
  getElectionElectionsByNameNameGet,
  GetElectionElectionsByNameNameGet$Params
} from '../fn/elections/get-election-elections-by-name-name-get';
import {
  registerInElectionElectionsRegisterNamePost,
  RegisterInElectionElectionsRegisterNamePost$Params
} from '../fn/elections/register-in-election-elections-register-name-post';
import {
  updateElectionElectionsByNameNamePatch,
  UpdateElectionElectionsByNameNamePatch$Params
} from '../fn/elections/update-election-elections-by-name-name-patch';
import {
  updateRegistrationElectionsRegisterNamePatch,
  UpdateRegistrationElectionsRegisterNamePatch$Params
} from '../fn/elections/update-registration-elections-register-name-patch';

@Injectable({ providedIn: 'root' })
export class ElectionsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getElectionElectionsByNameNameGet()` */
  static readonly GetElectionElectionsByNameNameGetPath = '/elections/by_name/{name}';

  /**
   * Get Election.
   *
   * Retrieves the election data for an election by name
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getElectionElectionsByNameNameGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getElectionElectionsByNameNameGet$Response(
    params: GetElectionElectionsByNameNameGet$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return getElectionElectionsByNameNameGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Election.
   *
   * Retrieves the election data for an election by name
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getElectionElectionsByNameNameGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getElectionElectionsByNameNameGet(
    params: GetElectionElectionsByNameNameGet$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.getElectionElectionsByNameNameGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `createElectionElectionsByNameNamePost()` */
  static readonly CreateElectionElectionsByNameNamePostPath = '/elections/by_name/{name}';

  /**
   * Create Election.
   *
   * Creates an election and places it in the database. Returns election json on success
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createElectionElectionsByNameNamePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  createElectionElectionsByNameNamePost$Response(
    params: CreateElectionElectionsByNameNamePost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return createElectionElectionsByNameNamePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Election.
   *
   * Creates an election and places it in the database. Returns election json on success
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createElectionElectionsByNameNamePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createElectionElectionsByNameNamePost(
    params: CreateElectionElectionsByNameNamePost$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.createElectionElectionsByNameNamePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteElectionElectionsByNameNameDelete()` */
  static readonly DeleteElectionElectionsByNameNameDeletePath = '/elections/by_name/{name}';

  /**
   * Delete Election.
   *
   * Deletes an election from the database. Returns whether the election exists after deletion.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteElectionElectionsByNameNameDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteElectionElectionsByNameNameDelete$Response(
    params: DeleteElectionElectionsByNameNameDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return deleteElectionElectionsByNameNameDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Election.
   *
   * Deletes an election from the database. Returns whether the election exists after deletion.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteElectionElectionsByNameNameDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteElectionElectionsByNameNameDelete(
    params: DeleteElectionElectionsByNameNameDelete$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.deleteElectionElectionsByNameNameDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateElectionElectionsByNameNamePatch()` */
  static readonly UpdateElectionElectionsByNameNamePatchPath = '/elections/by_name/{name}';

  /**
   * Update Election.
   *
   * Updates an election in the database.
   *
   *         Note that this doesn't let you change the name of an election, unless the new
   *         name produces the same slug.
   *
   *         Returns election json on success.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateElectionElectionsByNameNamePatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateElectionElectionsByNameNamePatch$Response(
    params: UpdateElectionElectionsByNameNamePatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return updateElectionElectionsByNameNamePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Election.
   *
   * Updates an election in the database.
   *
   *         Note that this doesn't let you change the name of an election, unless the new
   *         name produces the same slug.
   *
   *         Returns election json on success.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateElectionElectionsByNameNamePatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateElectionElectionsByNameNamePatch(
    params: UpdateElectionElectionsByNameNamePatch$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.updateElectionElectionsByNameNamePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `registerInElectionElectionsRegisterNamePost()` */
  static readonly RegisterInElectionElectionsRegisterNamePostPath = '/elections/register/{name}';

  /**
   * Register In Election.
   *
   * allows a user to register for an election
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerInElectionElectionsRegisterNamePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  registerInElectionElectionsRegisterNamePost$Response(
    params: RegisterInElectionElectionsRegisterNamePost$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return registerInElectionElectionsRegisterNamePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Register In Election.
   *
   * allows a user to register for an election
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerInElectionElectionsRegisterNamePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  registerInElectionElectionsRegisterNamePost(
    params: RegisterInElectionElectionsRegisterNamePost$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.registerInElectionElectionsRegisterNamePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteRegistrationElectionsRegisterNameDelete()` */
  static readonly DeleteRegistrationElectionsRegisterNameDeletePath = '/elections/register/{name}';

  /**
   * Delete Registration.
   *
   * revoke your registration in the election
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteRegistrationElectionsRegisterNameDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRegistrationElectionsRegisterNameDelete$Response(
    params: DeleteRegistrationElectionsRegisterNameDelete$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return deleteRegistrationElectionsRegisterNameDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Registration.
   *
   * revoke your registration in the election
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteRegistrationElectionsRegisterNameDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteRegistrationElectionsRegisterNameDelete(
    params: DeleteRegistrationElectionsRegisterNameDelete$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.deleteRegistrationElectionsRegisterNameDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateRegistrationElectionsRegisterNamePatch()` */
  static readonly UpdateRegistrationElectionsRegisterNamePatchPath = '/elections/register/{name}';

  /**
   * Update Registration.
   *
   * update your registration for an election
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateRegistrationElectionsRegisterNamePatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRegistrationElectionsRegisterNamePatch$Response(
    params: UpdateRegistrationElectionsRegisterNamePatch$Params,
    context?: HttpContext
  ): Observable<StrictHttpResponse<any>> {
    return updateRegistrationElectionsRegisterNamePatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Registration.
   *
   * update your registration for an election
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateRegistrationElectionsRegisterNamePatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateRegistrationElectionsRegisterNamePatch(
    params: UpdateRegistrationElectionsRegisterNamePatch$Params,
    context?: HttpContext
  ): Observable<any> {
    return this.updateRegistrationElectionsRegisterNamePatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }
}
